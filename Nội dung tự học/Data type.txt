Data type: 
+ M·ªói lo·∫°i data s·∫Ω c√≥ 1 ch·ª©c nƒÉng ƒë·∫∑c th√π, t·ª´ ƒë√≥ c√≥ nh·ªØng method c√≥ s·∫µn c·ªßa ng√¥n ng·ªØ ƒë·ªÉ x·ª≠ l√Ω ƒë·∫∑c th√π ƒë√≥. V·∫•n ƒë·ªÅ l√† ch·ªçn type n√†o ƒë·ªÉ t·ªëi ∆∞u v·ªõi requirement v√† d√πng dcd t·ªët nh·∫•t ƒë·∫∑c th√π c·ªßa n√≥.
+ T∆∞·ªüng t∆∞·ª£ng m·ªói data type l√† 1 t∆∞·ªõng trong game. T∆∞·ªõng ƒë√≥ c√≥ s·ª©c m·∫°nh g√¨, function l√† g√¨(method) ƒë·ªÉ m√¨nh ƒë√°nh qu√°i
Btvn: List ra to√†n b·ªô data type v√† function ch√≠nh c·ªßa n√≥. C√°c lo·∫°i t∆∞·ªõng ch√≠nh:
String
Number
Bigint
Boolean
Undefined
Null
Symbol
Object: objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.



-------------------------- T∆∞·ªõng String --------------------------
+ L√† n∆°i l∆∞u tr·ªØ d·ªØ li·ªáu vƒÉn b·∫£n(text). T√™n,ƒëchi,c√¢u th√¥ng b√°o.. String ph·∫£i ƒë·∫∑t trong d·∫•u "" ho·∫∑c ' '
+ The backslash escape character (\) turns special characters into string characters: \"= "
+ Six other escape sequences are valid in JavaScript: \b	Backspace, \f	Form Feed, \n	New Line, \r	Carriage Return,...
M·ªôt s·ªë ch·ª©c nƒÉng ch√≠nh method: Thao t√°c v·ªõi chu·ªói &  Search chu·ªói
+ length(), toUpperCase() & toLowerCase() ‚Äì Chuy·ªÉn ƒë·ªïi ch·ªØ hoa/th∆∞·ªùng, trim() ‚Äì Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi chu·ªói
+ slice(start, end) ‚Äì C·∫Øt chu·ªói theo v·ªã tr√≠. console.log(str.slice(0, 5)); // "Hello"
+ replace(searchValue, newValue) ‚Äì Thay th·∫ø m·ªôt ph·∫ßn c·ªßa chu·ªói
+ split(separator) ‚Äì T√°ch chu·ªói th√†nh m·∫£ng
+ includes(substring) ‚Äì Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a m·ªôt t·ª´ c·ª• th·ªÉ kh√¥ng
+ indexOf(substring) & lastIndexOf(substring) ‚Äì T√¨m v·ªã tr√≠ c·ªßa chu·ªói con: console.log(str.indexOf("o")); // 4
+ startsWith(substring) & endsWith(substring) ‚Äì Ki·ªÉm tra chu·ªói c√≥ b·∫Øt ƒë·∫ßu/k·∫øt th√∫c b·∫±ng m·ªôt t·ª´ c·ª• th·ªÉ kh√¥ng :console.log(str.endsWith("!")); // true
+ concat() joins two or more strings:
+ .values() : tr·∫£ l·∫°i iterator.
--> T√≥m l·∫°i t·∫°i sao d√πng t∆∞·ªõng String  <--
- Trong JavaScript, chu·ªói (String) thu·ªôc ki·ªÉu d·ªØ li·ªáu primitive (nguy√™n th·ªßy), c√≥ nghƒ©a l√† ch√∫ng kh√¥ng ph·∫£i l√† object (ƒë·ªëi t∆∞·ª£ng) nh∆∞ m·∫£ng hay ƒë·ªëi t∆∞·ª£ng Object. M·ªôt ƒë·∫∑c ƒëi·ªÉm quan tr·ªçng c·ªßa String l√† immutable (b·∫•t bi·∫øn), t·ª©c l√† m·ªçi thao t√°c tr√™n chu·ªói s·∫Ω kh√¥ng thay ƒë·ªïi chu·ªói g·ªëc, m√† t·∫°o ra m·ªôt chu·ªói m·ªõi.
+ N·∫øu b·∫°n mu·ªën gi·ªØ gi√° tr·ªã m·ªõi c·ªßa chu·ªói sau khi thay ƒë·ªïi, ph·∫£i g√°n n√≥ v√†o bi·∫øn m·ªõi.V√≠ d·ª•, n·∫øu ch·ªâ g·ªçi str.toUpperCase(); m√† kh√¥ng g√°n, gi√° tr·ªã ban ƒë·∫ßu c·ªßa str v·∫´n kh√¥ng thay ƒë·ªïi.
+ V√≠ d·ª•, n·∫øu b·∫°n c·ªë g·∫Øng ch·ªânh s·ª≠a str[0] = "J";, n√≥ s·∫Ω kh√¥ng thay ƒë·ªïi v√¨ String l√† immutable.
- M·ªói khi thay ƒë·ªïi chu·ªói, JavaScript ph·∫£i t·∫°o m·ªôt chu·ªói m·ªõi, d·∫´n ƒë·∫øn s·ª≠ d·ª•ng th√™m b·ªô nh·ªõ. N·∫øu c·∫ßn thay ƒë·ªïi nhi·ªÅu, c√≥ th·ªÉ d√πng array ho·∫∑c StringBuilder (trong c√°c ng√¥n ng·ªØ kh√°c nh∆∞ Java). Ghi nh·ªõ: N·∫øu mu·ªën thay ƒë·ªïi n·ªôi dung chu·ªói nhi·ªÅu l·∫ßn, h√£y d√πng Array ho·∫∑c c√°c ph∆∞∆°ng ph√°p kh√°c ƒë·ªÉ t·ªëi ∆∞u!
- Template String : `` --> khai b√°o ki·ªÉu n√†y thay cho ngo·∫∑c ƒë∆°n/k√©p th√¨ s·∫Ω d√πng ƒë∆∞·ª£c bi·∫øn ${} trong string.

-------------------------- T∆∞·ªõng Number --------------------------
+ By default, JavaScript displays numbers as base 10 decimals.
+ BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number.

M·ªôt s·ªë ch·ª©c nƒÉng ch√≠nh method: Thao t√°c v·ªõi number:
+ toFixed() returns a string, with the number written with a specified number of decimals: let x = 9.656; x.toFixed(0)//10;
x.toFixed(2)//9.7;
+ Converting Variables to Numbers: Number(), parseFloat(), parseInt()

C√≥ t·∫≠n **3 ph∆∞∆°ng th·ª©c** ƒë·ªÉ chuy·ªÉn ƒë·ªïi m·ªôt bi·∫øn th√†nh s·ªë trong JavaScript v√¨ m·ªói ph∆∞∆°ng th·ª©c c√≥ **m·ª•c ƒë√≠ch ri√™ng bi·ªát**. D∆∞·ªõi ƒë√¢y l√† s·ª± kh√°c nhau gi·ªØa ch√∫ng v√† l√Ω do c·∫ßn bi·∫øt:

### üîπ **Kh√°c bi·ªát gi·ªØa 3 ph∆∞∆°ng th·ª©c**
| **Ph∆∞∆°ng th·ª©c**   | **C√°ch ho·∫°t ƒë·ªông** | **K·∫øt qu·∫£** |
|-------------------|-----------------|-------------|
| `Number(value)`  | Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh s·ªë (c·∫£ s·ªë nguy√™n v√† s·ªë th·ª±c) | `Number("10.5") ‚Üí 10.5` |
| `parseFloat(value)` | Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh s·ªë th·ª±c (c√≥ d·∫•u ch·∫•m th·∫≠p ph√¢n) | `parseFloat("10.5px") ‚Üí 10.5` |
| `parseInt(value)` | Chuy·ªÉn ƒë·ªïi th√†nh s·ªë nguy√™n (b·ªè ph·∫ßn th·∫≠p ph√¢n) | `parseInt("10.5px") ‚Üí 10` |

---

### üîπ **T·∫°i sao l·∫°i c·∫ßn bi·∫øt?**
1. **Tr√°nh l·ªói khi chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu**
   - Khi l√†m vi·ªác v·ªõi d·ªØ li·ªáu nh·∫≠p t·ª´ ng∆∞·ªùi d√πng ho·∫∑c API, ch√∫ng th∆∞·ªùng ·ªü d·∫°ng **chu·ªói** (`string`). N·∫øu b·∫°n kh√¥ng chuy·ªÉn ƒë·ªïi ƒë√∫ng c√°ch, c√≥ th·ªÉ g·∫∑p l·ªói ho·∫∑c k·∫øt qu·∫£ kh√¥ng mong mu·ªën.

2. **Ch·ªçn ph∆∞∆°ng th·ª©c ph√π h·ª£p v·ªõi t·ª´ng tr∆∞·ªùng h·ª£p**
   - **D√πng `Number(value)`** khi ch·∫Øc ch·∫Øn gi√° tr·ªã ƒë·∫ßu v√†o l√† m·ªôt s·ªë h·ª£p l·ªá (kh√¥ng c√≥ k√Ω t·ª± l·∫°).
   - **D√πng `parseFloat(value)`** khi mu·ªën l·∫•y s·ªë th·ª±c t·ª´ chu·ªói c√≥ ch·ª©a vƒÉn b·∫£n, ch·∫≥ng h·∫°n `"10.5px"`.
   - **D√πng `parseInt(value)`** khi ch·ªâ c·∫ßn s·ªë nguy√™n v√† b·ªè ph·∫ßn th·∫≠p ph√¢n.

3. **L√†m vi·ªác v·ªõi c√°c gi√° tr·ªã ƒë·∫∑c bi·ªát**
   - N·∫øu chuy·ªÉn ƒë·ªïi `"abc"` b·∫±ng `Number("abc")`, k·∫øt qu·∫£ l√† `NaN` (Not a Number).
   - N·∫øu d√πng `parseInt("123abc")`, n√≥ s·∫Ω tr·∫£ v·ªÅ `123` v√¨ ch·ªâ l·∫•y ph·∫ßn s·ªë ƒë·∫ßu ti√™n.
---
üí° **M·∫πo:** N·∫øu kh√¥ng ch·∫Øc d·ªØ li·ªáu ƒë·∫ßu v√†o, b·∫°n c√≥ th·ªÉ d√πng `isNaN()` ƒë·ªÉ ki·ªÉm tra tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi!
function convertToNumber(value) {
    if (isNaN(value)) {
        return "Gi√° tr·ªã kh√¥ng h·ª£p l·ªá!";
    }
    return Number(value);
}


-------------------------- T∆∞·ªõng Array --------------------------
+ Array l√† 1 bi·∫øn c√≥ th·ªÉ l∆∞u ƒë∆∞·ª£c nhi·ªÅu value. Khi m√† c√≥ 1 list items th√¨ d√πng c√°i n√†y. 
+  Khai b√°o [] . Khai b√°o bi·∫øn array v·ªõi const. V√¨ array l√† list v√† th∆∞·ªùng ko ƒë·ªïi.
+ Ti·∫øp c·∫≠n c√°c th√†nh ph·∫ßn trong array:  d√πng index [], 
+ Array Elements Can Be Objects. Arrays are special kinds of objects.
+ C√≥ th·ªÉ khai b√°o c√°c items trong array v·ªõi lo·∫°i kh√°c nhau nh∆∞: myArray[0] = Date.now; myArray[1] = myFunction; myArray[2] = myCars;

M·ªôt s·ªë ch·ª©c nƒÉng ch√≠nh method: Thao t√°c v·ªõi array &  Search array:
+ .length(): The length property is always one more than the highest array index.
+ Khi th√™m 1 element m·ªõi cho array d√πng: .push()
+ N·∫øu khai b√°o c·∫∑p key/values th√¨ JS s·∫Ω t·ª± ƒë·ªông bi·∫øn array sang object. V√† method s·ª≠ d·ª•ng cho array c√≥ th·ªÉ ko c√≤n ƒë√∫ng n·ªØa: 
const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length;     // Will return 0
person[0];         // Will return undefined

+ push() - Th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng
+ pop() - X√≥a ph·∫ßn t·ª≠ cu·ªëi c√πng
+ shift() - X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
+ unshift() - Th√™m ph·∫ßn t·ª≠ v√†o ƒë·∫ßu m·∫£ng
+ splice(start, deleteCount, item1, item2, ...) - Th√™m/X√≥a/Thay th·∫ø ph·∫ßn t·ª≠
+ slice(start, end) - C·∫Øt m·ªôt ph·∫ßn c·ªßa m·∫£ng
+ indexOf(item) - T√¨m v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠
+ includes(item) - Ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i
+ join(separator) - Chuy·ªÉn m·∫£ng th√†nh chu·ªói
+ reverse() - ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± m·∫£ng
+  toString() converts an array to a string of (comma separated) array values.
+ The sort() method sorts an array alphabetically: Banana,Orange,Apple,Mango -> Apple,Banana,Mango,Orange
+ Array Iteration l√† qu√° tr√¨nh duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng ƒë·ªÉ th·ª±c hi·ªán m·ªôt thao t√°c n√†o ƒë√≥, nh∆∞ in ra m√†n h√¨nh, t√≠nh to√°n, ho·∫∑c thay ƒë·ªïi d·ªØ li·ªáu.Kh√¥ng c·∫ßn d√πng v√≤ng l·∫∑p for, ch·ªâ c·∫ßn g·ªçi method tr·ª±c ti·∫øp. ‚úî Hi·ªáu su·∫•t t·ªët h∆°n: C√°c method nh∆∞ map(), filter(), reduce() ƒë∆∞·ª£c t·ªëi ∆∞u cho x·ª≠ l√Ω m·∫£ng. ‚úî L·∫≠p tr√¨nh theo phong c√°ch "Functional Programming": Gi√∫p code linh ho·∫°t v√† d·ªÖ b·∫£o tr√¨.
++ forEach() ‚Äì Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ v√† th·ª±c hi·ªán h√†nh ƒë·ªông
++ filter() ‚Äì L·ªçc ph·∫ßn t·ª≠ th·ªèa ƒëi·ªÅu ki·ªán
--> Khi n√†o d√πng t∆∞·ªõng Array <--
‚úÖ D√πng khi: D·ªØ li·ªáu c√≥ th·ª© t·ª± r√µ r√†ng.C·∫ßn truy c·∫≠p nhanh b·∫±ng index (students[2]).Mu·ªën s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c c·ªßa m·∫£ng (push(), map(), filter()‚Ä¶).
D√πng khi‚Ä¶                                Array	Object
Truy c·∫≠p theo th·ª© t·ª± s·ªë (index)	          ‚úÖ	   ‚ùå
Truy c·∫≠p theo t√™n thu·ªôc t√≠nh (chu·ªói)	    ‚ùå	   ‚úÖ
Danh s√°ch c√≥ th·ª© t·ª± (h·ªçc sinh, s·∫£n ph·∫©m‚Ä¶)	‚úÖ	   ‚ùå
Th√¥ng tin c·ªßa m·ªôt th·ª±c th·ªÉ (ng∆∞·ªùi, s√°ch‚Ä¶)	‚ùå	   ‚úÖ
+ The Difference Between Arrays and Objects: In JavaScript, arrays use numbered indexes.  In JavaScript, objects use named indexes.

-----------------------------------------------------------------------------
### üîπ **T·∫°i sao c·∫ßn chia Set, Map, Object th√†nh 3 lo·∫°i kh√°c nhau?**  
JavaScript cung c·∫•p **Set, Map v√† Object** v√¨ m·ªói lo·∫°i c√≥ **c√°ch l∆∞u tr·ªØ v√† truy xu·∫•t d·ªØ li·ªáu kh√°c nhau**, ph·ª•c v·ª• t·ª´ng m·ª•c ƒë√≠ch c·ª• th·ªÉ.  

| **Lo·∫°i** | **D√πng ƒë·ªÉ l∆∞u tr·ªØ** | **C√°ch truy xu·∫•t d·ªØ li·ªáu** | **C√≥ th·ª© t·ª± kh√¥ng?** | **ƒê·∫∑c ƒëi·ªÉm ch√≠nh** |
|----------|----------------|-------------------|-----------------|-------------------|
| **Object** | C·∫∑p **key-value**, key l√† chu·ªói ho·∫∑c k√Ω hi·ªáu (`Symbol`) | Truy c·∫≠p b·∫±ng key (`obj.key` ho·∫∑c `obj["key"]`) | ‚ùå Kh√¥ng c√≥ th·ª© t·ª± r√µ r√†ng | D√πng ph·ªï bi·∫øn ƒë·ªÉ l∆∞u th√¥ng tin theo t·ª´ng thu·ªôc t√≠nh |
| **Map** | C·∫∑p **key-value**, key c√≥ th·ªÉ l√† **b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu** | Truy c·∫≠p b·∫±ng `map.get(key)` | ‚úÖ C√≥ th·ª© t·ª± theo l√∫c th√™m ph·∫ßn t·ª≠ | Th√≠ch h·ª£p cho c√°c c·∫•u tr√∫c d·ªØ li·ªáu ph·ª©c t·∫°p c·∫ßn key linh ho·∫°t |
| **Set** | D·ªØ li·ªáu **duy nh·∫•t**, kh√¥ng b·ªã tr√πng l·∫∑p | Ki·ªÉm tra b·∫±ng `set.has(value)` | ‚úÖ C√≥ th·ª© t·ª± theo l√∫c th√™m ph·∫ßn t·ª≠ | T·ªët ƒë·ªÉ l∆∞u danh s√°ch c√°c gi√° tr·ªã kh√¥ng tr√πng |

---

### üîπ **ƒê·∫∑c ƒëi·ªÉm t·ª´ng lo·∫°i**  

1Ô∏è‚É£ **Object** (ƒê·ªëi t∆∞·ª£ng)  
- Ch·ªâ d√πng **chu·ªói** (`string`) ho·∫∑c `Symbol` l√†m key.  
- Kh√¥ng c√≥ th·ª© t·ª± c·ªë ƒë·ªãnh.  
- Th∆∞·ªùng d√πng ƒë·ªÉ l∆∞u th√¥ng tin d·∫°ng **key-value** c·ªßa m·ªôt th·ª±c th·ªÉ.  
```js
let person = { name: "Alice", age: 25 };
console.log(person.name); // Alice
```

2Ô∏è‚É£ **Map**  
- **Key c√≥ th·ªÉ l√† b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu**: s·ªë, chu·ªói, object, boolean,‚Ä¶  
- C√≥ th·ª© t·ª± theo l√∫c th√™m v√†o.  
- T·ªët h∆°n `Object` khi c·∫ßn qu·∫£n l√Ω nhi·ªÅu lo·∫°i key kh√°c nhau.  
```js
let userRoles = new Map();
userRoles.set("Alice", "Admin");
userRoles.set(123, "Member");
console.log(userRoles.get(123)); // Member
```

3Ô∏è‚É£ **Set**  
- **Ch·ªâ l∆∞u c√°c gi√° tr·ªã duy nh·∫•t**, kh√¥ng l·∫∑p l·∫°i.  
- C√≥ th·ª© t·ª± theo l√∫c th√™m v√†o.  
- R·∫•t h·ªØu √≠ch khi c·∫ßn l·ªçc b·ªè ph·∫ßn t·ª≠ tr√πng l·∫∑p.  
```js
let uniqueNumbers = new Set([1, 2, 3, 2, 1]);
console.log(uniqueNumbers); // Set(3) {1, 2, 3}
```

---

### üîπ **Method ƒë·∫∑c tr∆∞ng c·ªßa t·ª´ng lo·∫°i**  

| **Lo·∫°i**  | **Method quan tr·ªçng** | **M√¥ t·∫£** |
|-----------|-----------------|----------|
| **Object**  | `Object.keys(obj)` | Tr·∫£ v·ªÅ danh s√°ch key c·ªßa object |
|   | `Object.values(obj)` | Tr·∫£ v·ªÅ danh s√°ch gi√° tr·ªã c·ªßa object |
| **Map**  | `map.set(key, value)` | Th√™m ph·∫ßn t·ª≠ v√†o Map |
|   | `map.get(key)` | L·∫•y gi√° tr·ªã theo key |
|   | `map.has(key)` | Ki·ªÉm tra key c√≥ t·ªìn t·∫°i |
|   | `map.delete(key)` | X√≥a ph·∫ßn t·ª≠ theo key |
| **Set**  | `set.add(value)` | Th√™m ph·∫ßn t·ª≠ v√†o Set |
|   | `set.has(value)` | Ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i |
|   | `set.delete(value)` | X√≥a ph·∫ßn t·ª≠ kh·ªèi Set |

---

### üîπ **Khi n√†o s·ª≠ d·ª•ng t·ª´ng lo·∫°i?**  
‚úî **D√πng `Object`** khi l∆∞u th√¥ng tin thu·ªôc t√≠nh c·ªßa m·ªôt th·ª±c th·ªÉ (VD: th√¥ng tin user).  
‚úî **D√πng `Map`** khi c·∫ßn l∆∞u key-value c√≥ th·ª© t·ª± v√† key linh ho·∫°t.  
‚úî **D√πng `Set`** khi c·∫ßn l∆∞u danh s√°ch kh√¥ng tr√πng l·∫∑p (VD: danh s√°ch ID duy nh·∫•t).  

üí° **M·∫πo:** N·∫øu b·∫°n **kh√¥ng ch·∫Øc d√πng Object hay Map**, h√£y d√πng `Map` v√¨ n√≥ c√≥ hi·ªáu su·∫•t t·ªët h∆°n khi l√†m vi·ªác v·ªõi nhi·ªÅu key! üöÄ  
B·∫°n mu·ªën t√¨m hi·ªÉu s√¢u h∆°n v·ªÅ lo·∫°i n√†o kh√¥ng? üòÉ

------------------------------ JS ERROR------------------------
1.
JavaScript try and catch
The try statement allows you to define a block of code to be tested for errors while it is being executed.

The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

The JavaScript statements try and catch come in pairs:
try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
}
--> err l√† 1 object. c√≥ th·ªÉ g·ªçi err.name ƒë·ªÉ xem t√™n l·ªói. ho·∫∑c err.message show n·ªôi dung mess l·ªói

2. 
The throw Statement
The throw statement allows you to create a custom error.

Technically you can throw an exception (throw an error).

The exception can be a JavaScript String, a Number, a Boolean or an Object:

3.
The finally Statement
The finally statement lets you execute code, after try and catch, regardless of the result:
try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
}
finally {
  Block of code to be executed regardless of the try / catch result
}

---------------Hoisting--------------------------
+ Hoisting is JavaScript's default behavior of moving declarations to the top.Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).
+ C√°c bi·∫øn let v√† const ƒë∆∞·ª£c hoisted (ƒë∆∞a l√™n ƒë·∫ßu ph·∫°m vi kh·ªëi block) nh∆∞ng kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o ngay l·∫≠p t·ª©c. ƒêi·ªÅu n√†y t·∫°o ra "temporal dead zone" (TDZ) ‚Äì v√πng m√† bi·∫øn t·ªìn t·∫°i nh∆∞ng ch∆∞a th·ªÉ s·ª≠ d·ª•ng cho ƒë·∫øn khi ƒë∆∞·ª£c khai b√°o.
console.log(x); // ‚ùå ReferenceError: Cannot access 'x' before initialization
let x = 10;     // Khai b√°o bi·∫øn sau khi b·ªã l·ªói
console.log(x); // ‚úÖ 10 (B√¢y gi·ªù bi·∫øn x c√≥ gi√° tr·ªã)
+ N·∫øu d√πng var, s·∫Ω kh√¥ng b·ªã l·ªói v√¨ var ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi undefined ngay t·ª´ ƒë·∫ßu:

---------------Class--------------------------
1. Hi·ªÉu t·∫°i sao l·∫°i c·∫ßn class r·ªìi :
Functions vaf class n·∫øu c√≥ khai b√°o constructor th√¨ deu tao duoc class. Tuy nhien , class c√≥ nhi·ªÅu uu diem hon v√¨ n√≥ c√≥ 4 cai thuoc tinh quan trong. 
Neu dung function th√¨ khong th·ªÉ d·ªÖ dang lay ra method, thuoctinh nhu class doc
ƒê√∫ng v·∫≠y! C·∫£ **constructor function** (`function Car`) v√† **class** (`class Car`) ƒë·ªÅu c√≥ th·ªÉ t·∫°o object `Car`, nh∆∞ng c√≥ nh·ªØng l√Ω do quan tr·ªçng khi·∫øn **class** ƒë∆∞·ª£c ∆∞a chu·ªông h∆°n trong JavaScript hi·ªán ƒë·∫°i. H√£y c√πng ph√¢n t√≠ch:

---

### üîπ **1. Class c√≥ c√∫ ph√°p r√µ r√†ng v√† tr·ª±c quan h∆°n**
- Khi d√πng `function Car`, ta ƒëang m√¥ ph·ªèng l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP) theo ki·ªÉu c≈©.
- `class` cung c·∫•p c√∫ ph√°p r√µ r√†ng h∆°n, d·ªÖ ƒë·ªçc v√† d·ªÖ hi·ªÉu h∆°n khi khai b√°o m·ªôt object c√≥ ph∆∞∆°ng th·ª©c v√† thu·ªôc t√≠nh.

V√≠ d·ª• **constructor function**:
```javascript
function Car(brand, color, year) {
    this.brand = brand;
    this.color = color;
    this.year = year;
}

Car.prototype.getInfo = function() {
    return `${this.brand} - ${this.color} - ${this.year}`;
};

const car1 = new Car("Toyota", "Red", 2025);
console.log(car1.getInfo()); // Toyota - Red - 2025
```
V√≠ d·ª• **class**:
```javascript
class Car {
    constructor(brand, color, year) {
        this.brand = brand;
        this.color = color;
        this.year = year;
    }

    getInfo() {
        return `${this.brand} - ${this.color} - ${this.year}`;
    }
}

const car1 = new Car("Toyota", "Red", 2025);
console.log(car1.getInfo()); // Toyota - Red - 2025
```
‚ú® **L·ª£i √≠ch:**  
‚úÖ `class Car` gi√∫p qu·∫£n l√Ω code t·ªët h∆°n, v√¨ c√°c ph∆∞∆°ng th·ª©c (`getInfo`) ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ngay b√™n trong class.  
‚úÖ Trong `function Car`, ta ph·∫£i d√πng `Car.prototype.getInfo`, l√†m cho code d√†i v√† kh√≥ theo d√µi h∆°n.

---

### üîπ **2. Class h·ªó tr·ª£ k·∫ø th·ª´a t·ªët h∆°n (Inheritance)**
N·∫øu b·∫°n mu·ªën t·∫°o m·ªôt class **ElectricCar** k·∫ø th·ª´a t·ª´ `Car`, `class` gi√∫p l√†m ƒëi·ªÅu n√†y d·ªÖ d√†ng h∆°n.

V√≠ d·ª• **k·∫ø th·ª´a v·ªõi class**:
```javascript
class Car {
    constructor(brand, color, year) {
        this.brand = brand;
        this.color = color;
        this.year = year;
    }

    getInfo() {
        return `${this.brand} - ${this.color} - ${this.year}`;
    }
}

class ElectricCar extends Car {
    constructor(brand, color, year, batteryLife) {
        super(brand, color, year); // G·ªçi constructor c·ªßa class Car
        this.batteryLife = batteryLife;
    }

    getBatteryInfo() {
        return `Pin s·ª≠ d·ª•ng ${this.batteryLife} gi·ªù.`;
    }
}

const tesla = new ElectricCar("Tesla", "Black", 2025, "12h");
console.log(tesla.getInfo());        // Tesla - Black - 2025
console.log(tesla.getBatteryInfo()); // Pin s·ª≠ d·ª•ng 12 gi·ªù.
```
‚ú® **L·ª£i √≠ch:**  
‚úÖ `super()` gi√∫p k·∫ø th·ª´a thu·ªôc t√≠nh t·ª´ `Car` d·ªÖ d√†ng.  
‚úÖ `ElectricCar` c√≥ th·ªÉ m·ªü r·ªông ch·ª©c nƒÉng m√† kh√¥ng c·∫ßn s·ª≠a ƒë·ªïi `Car`.  
‚úÖ N·∫øu d√πng `function Car`, ta ph·∫£i d√πng `Object.create` ho·∫∑c `prototype`, l√†m cho code ph·ª©c t·∫°p h∆°n.

---

### üîπ **3. Class gi√∫p tr√°nh l·ªói khi qu√™n t·ª´ kh√≥a `new`**
- Khi d√πng constructor function, n·∫øu qu√™n `new`, `this` s·∫Ω tr·ªè ƒë·∫øn **global object** (`window` ho·∫∑c `undefined` trong strict mode).
- Class trong JavaScript **b·∫Øt bu·ªôc ph·∫£i d√πng `new`**, gi√∫p tr√°nh l·ªói kh√¥ng mong mu·ªën.

V√≠ d·ª• **constructor function** (c√≥ th·ªÉ g√¢y l·ªói):
```javascript
function Car(brand) {
    this.brand = brand;
}

const car1 = Car("Toyota"); // Qu√™n `new` -> L·ªói, `this.brand` kh√¥ng ho·∫°t ƒë·ªông
console.log(car1.brand); // TypeError: Cannot read properties of undefined
```
V√≠ d·ª• **class** (s·∫Ω b·∫Øt l·ªói ngay):
```javascript
class Car {
    constructor(brand) {
        this.brand = brand;
    }
}

const car1 = Car("Toyota"); // Qu√™n `new` -> L·ªói: Class constructor Car cannot be invoked without 'new'
```
‚ú® **L·ª£i √≠ch:**  
‚úÖ V·ªõi **class**, JavaScript b·∫Øt l·ªói ngay khi kh√¥ng d√πng `new`, gi√∫p tr√°nh bug ti·ªÅm ·∫©n.

---

### üìå **T√≥m l·∫°i, t·∫°i sao c·∫ßn class thay v√¨ constructor function?**
| Constructor Function | Class |
|----------------------|----------------------|
| C√∫ ph√°p d√†i h∆°n, ph·∫£i d√πng `prototype` ƒë·ªÉ th√™m ph∆∞∆°ng th·ª©c | C√∫ ph√°p g·ªçn g√†ng, d·ªÖ ƒë·ªçc, d·ªÖ m·ªü r·ªông |
| K·∫ø th·ª´a kh√≥ h∆°n, c·∫ßn d√πng `Object.create` | K·∫ø th·ª´a d·ªÖ d√†ng v·ªõi `extends` v√† `super()` |
| C√≥ th·ªÉ qu√™n `new`, g√¢y l·ªói | Lu√¥n b·∫Øt bu·ªôc d√πng `new`, gi√∫p tr√°nh l·ªói |

üí° **N·∫øu b·∫°n l√†m vi·ªác v·ªõi JavaScript hi·ªán ƒë·∫°i, n√™n s·ª≠ d·ª•ng `class` ƒë·ªÉ c√≥ c√∫ ph√°p r√µ r√†ng h∆°n v√† d·ªÖ b·∫£o tr√¨!**  
B·∫°n th·∫•y class c√≥ l·ª£i th·∫ø n√†o v·ªõi nhu c·∫ßu c·ªßa m√¨nh? üöÄüòÉ



------------------------------li·ªát k√™ to√†n b·ªô c√°c ph∆∞∆°ng ph√°p ƒë·ªÉ truy c·∫≠p qua c√°c data type: object, array, set, map------------------
D∆∞·ªõi ƒë√¢y l√† c√°c ph∆∞∆°ng ph√°p ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu trong **Object**, **Array**, **Set**, v√† **Map** trong JavaScript.  

---

### üîπ **1. Object**
- **Ch·ªâ d√†nh ri√™ng cho Object**:
  - `object.property` ‚Üí Truy c·∫≠p b·∫±ng d·∫•u `.`  
    ```javascript
    const person = { name: "Trung", age: 25 };
    console.log(person.name); // Trung
    ```
  - `object["property"]` ‚Üí Truy c·∫≠p b·∫±ng d·∫•u `[]`  
    ```javascript
    console.log(person["age"]); // 25
    ```
  - `Object.keys(object)` ‚Üí L·∫•y danh s√°ch key  
    ```javascript
    console.log(Object.keys(person)); // ["name", "age"]
    ```
  - `Object.values(object)` ‚Üí L·∫•y danh s√°ch value  
    ```javascript
    console.log(Object.values(person)); // ["Trung", 25]
    ```
  - `Object.entries(object)` ‚Üí L·∫•y key-value d·∫°ng m·∫£ng  
    ```javascript
    console.log(Object.entries(person)); // [["name", "Trung"], ["age", 25]]
    ```

---

### üîπ **2. Array**
- **Ch·ªâ d√†nh ri√™ng cho Array**:
  - `array[index]` ‚Üí Truy c·∫≠p ph·∫ßn t·ª≠ b·∫±ng ch·ªâ m·ª•c  
    ```javascript
    const numbers = [10, 20, 30];
    console.log(numbers[1]); // 20
    ```
  - `array.length` ‚Üí L·∫•y ƒë·ªô d√†i c·ªßa m·∫£ng  
    ```javascript
    console.log(numbers.length); // 3
    ```
  - `array.forEach(callback)` ‚Üí L·∫∑p qua t·ª´ng ph·∫ßn t·ª≠  
    ```javascript
    numbers.forEach(num => console.log(num));
    ```
  - `array.find(callback)` ‚Üí T√¨m ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n th·ªèa m√£n  
    ```javascript
    console.log(numbers.find(num => num > 10)); // 20
    ```

---

### üîπ **3. Set**
- **Ch·ªâ d√†nh ri√™ng cho Set**:
  - `set.has(value)` ‚Üí Ki·ªÉm tra xem Set c√≥ ch·ª©a ph·∫ßn t·ª≠ kh√¥ng  
    ```javascript
    const mySet = new Set([1, 2, 3]);
    console.log(mySet.has(2)); // true
    ```
  - `set.size` ‚Üí L·∫•y s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠  
    ```javascript
    console.log(mySet.size); // 3
    ```
  - `set.forEach(callback)` ‚Üí L·∫∑p qua t·ª´ng ph·∫ßn t·ª≠  
    ```javascript
    mySet.forEach(value => console.log(value));
    ```
  - `set.values()` ‚Üí Tr·∫£ v·ªÅ danh s√°ch gi√° tr·ªã  
    ```javascript
    console.log([...mySet.values()]); // [1, 2, 3]
    ```

---

### üîπ **4. Map**
- **Ch·ªâ d√†nh ri√™ng cho Map**:
  - `map.get(key)` ‚Üí L·∫•y gi√° tr·ªã theo key  
    ```javascript
    const myMap = new Map([["name", "Trung"], ["age", 25]]);
    console.log(myMap.get("name")); // Trung
    ```
  - `map.has(key)` ‚Üí Ki·ªÉm tra key c√≥ t·ªìn t·∫°i kh√¥ng  
    ```javascript
    console.log(myMap.has("age")); // true
    ```
  - `map.size` ‚Üí L·∫•y s·ªë l∆∞·ª£ng key-value  
    ```javascript
    console.log(myMap.size); // 2
    ```
  - `map.keys()` ‚Üí L·∫•y danh s√°ch key  
    ```javascript
    console.log([...myMap.keys()]); // ["name", "age"]
    ```
  - `map.values()` ‚Üí L·∫•y danh s√°ch value  
    ```javascript
    console.log([...myMap.values()]); // ["Trung", 25]
    ```

---

### üîπ **5. C√°c ph∆∞∆°ng ph√°p d√πng chung cho nhi·ªÅu Data Type**
| Ph∆∞∆°ng ph√°p         | Object | Array | Set | Map |
|------------|--------|-------|-----|-----  |
| `forEach(callback)` | ‚ùå   |  ‚úÖ |  ‚úÖ  | ‚úÖ |
| `keys()`            | ‚úÖ   | ‚ùå  | ‚úÖ   | ‚úÖ |
| `values()`          | ‚úÖ   | ‚ùå  | ‚úÖ   | ‚úÖ |
| `entries()`         | ‚úÖ   | ‚ùå  | ‚úÖ   | ‚úÖ |
| `size`              | ‚ùå   | ‚ùå  | ‚úÖ   | ‚úÖ |

---

### ‚ú® **T√≥m l·∫°i**
- **Object** ch·ªß y·∫øu truy c·∫≠p b·∫±ng `.` ho·∫∑c `[]`, c√≥ c√°c ph∆∞∆°ng th·ª©c nh∆∞ `Object.keys()`, `Object.values()`.
- **Array** d√πng ch·ªâ m·ª•c, c√≥ `forEach()`, `find()`, `length`.
- **Set** ch·ªâ l∆∞u gi√° tr·ªã duy nh·∫•t, c√≥ `has()`, `size()`, `values()`.
- **Map** ho·∫°t ƒë·ªông gi·ªëng Object nh∆∞ng h·ªó tr·ª£ `get()`, `keys()`, `size()`.

üí° **Map v√† Set c√≥ nhi·ªÅu ph∆∞∆°ng th·ª©c chung**, d·ªÖ d√†ng x·ª≠ l√Ω c√°c t·∫≠p h·ª£p d·ªØ li·ªáu l·ªõn.  
B·∫°n c·∫ßn ph√¢n t√≠ch th√™m ph·∫ßn n√†o kh√¥ng? üöÄüòÉ

---------------------------------








